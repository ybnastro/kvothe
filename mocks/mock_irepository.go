// Code generated by MockGen. DO NOT EDIT.
// Source: irepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	"github.com/SurgicalSteel/kvothe/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetSongQuoteByIDPostgres mocks base method.
func (m *MockIRepository)GetSongQuoteByIDPostgres(id int64) (*models.SongQuote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongQuoteByIDPostgres", id)
	ret0, _ := ret[0].(*models.SongQuote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongQuoteByIDPostgres indicates an expected call of GetSongQuoteByIDPostgres.
func (mr *MockIRepositoryMockRecorder) GetSongQuoteByIDPostgres(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongQuoteByIDPostgres", reflect.TypeOf((*MockIRepository)(nil).GetSongQuoteByIDPostgres), id)
}

// GetAllSongQuotesPostgres mocks base method.
func (m *MockIRepository)GetAllSongQuotesPostgres() ([]models.SongQuote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSongQuotesPostgres")
	ret0, _ := ret[0].([]models.SongQuote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSongQuotesPostgres indicates an expected call of GetAllSongQuotesPostgres.
func (mr *MockIRepositoryMockRecorder) GetAllSongQuotesPostgres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSongQuotesPostgres", reflect.TypeOf((*MockIRepository)(nil).GetAllSongQuotesPostgres))
}

// UpsertSongQuoteRedis mocks base method.
func (m *MockIRepository)UpsertSongQuoteRedis(SongQuote models.SongQuote) (error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSongQuoteRedis", SongQuote)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSongQuoteRedis indicates an expected call of UpsertSongQuoteRedis.
func (mr *MockIRepositoryMockRecorder) UpsertSongQuoteRedis(songQuote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSongQuoteRedis", reflect.TypeOf((*MockIRepository)(nil).UpsertSongQuoteRedis), songQuote)
}