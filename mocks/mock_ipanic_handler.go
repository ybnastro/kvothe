// Code generated by MockGen. DO NOT EDIT.
// Source: ipanic_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	resources "github.com/SurgicalSteel/kvothe/resources"
	reflect "reflect"

	slack "github.com/ashwanthkumar/slack-go-webhook"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIPanicHandler is a mock of IPanicHandler interface.
type MockIPanicHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIPanicHandlerMockRecorder
}

// MockIPanicHandlerMockRecorder is the mock recorder for MockIPanicHandler.
type MockIPanicHandlerMockRecorder struct {
	mock *MockIPanicHandler
}

// NewMockIPanicHandler creates a new mock instance.
func NewMockIPanicHandler(ctrl *gomock.Controller) *MockIPanicHandler {
	mock := &MockIPanicHandler{ctrl: ctrl}
	mock.recorder = &MockIPanicHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPanicHandler) EXPECT() *MockIPanicHandlerMockRecorder {
	return m.recorder
}

// GetPanicAndSendToSlack mocks base method.
func (m *MockIPanicHandler) GetPanicAndSendToSlack(c *gin.Context, serviceName, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPanicAndSendToSlack", c, serviceName, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPanicAndSendToSlack indicates an expected call of GetPanicAndSendToSlack.
func (mr *MockIPanicHandlerMockRecorder) GetPanicAndSendToSlack(c, serviceName, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPanicAndSendToSlack", reflect.TypeOf((*MockIPanicHandler)(nil).GetPanicAndSendToSlack), c, serviceName, message)
}

// SetPanicResp mocks base method.
func (m *MockIPanicHandler) SetPanicResp(c *gin.Context, serviceName, message string) *resources.PanicHandlerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPanicResp", c, serviceName, message)
	ret0, _ := ret[0].(*resources.PanicHandlerResponse)
	return ret0
}

// SetPanicResp indicates an expected call of SetPanicResp.
func (mr *MockIPanicHandlerMockRecorder) SetPanicResp(c, serviceName, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPanicResp", reflect.TypeOf((*MockIPanicHandler)(nil).SetPanicResp), c, serviceName, message)
}

// SetPayloadSlack mocks base method.
func (m *MockIPanicHandler) SetPayloadSlack(resp *resources.PanicHandlerResponse) slack.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPayloadSlack", resp)
	ret0, _ := ret[0].(slack.Payload)
	return ret0
}

// SetPayloadSlack indicates an expected call of SetPayloadSlack.
func (mr *MockIPanicHandlerMockRecorder) SetPayloadSlack(resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayloadSlack", reflect.TypeOf((*MockIPanicHandler)(nil).SetPayloadSlack), resp)
}
