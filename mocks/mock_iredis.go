// Code generated by MockGen. DO NOT EDIT.
// Source: iredis.go

// Package mocks is a generated GoMock package.
package mocks

import (
	resources "github.com/SurgicalSteel/kvothe/resources"
	reflect "reflect"

	redsync "github.com/go-redsync/redsync/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockIRedis is a mock of IRedis interface.
type MockIRedis struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisMockRecorder
}

// MockIRedisMockRecorder is the mock recorder for MockIRedis.
type MockIRedisMockRecorder struct {
	mock *MockIRedis
}

// NewMockIRedis creates a new mock instance.
func NewMockIRedis(ctrl *gomock.Controller) *MockIRedis {
	mock := &MockIRedis{ctrl: ctrl}
	mock.recorder = &MockIRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedis) EXPECT() *MockIRedisMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIRedis) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIRedisMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIRedis)(nil).Close))
}

// ConnectRedis mocks base method.
func (m *MockIRedis) ConnectRedis(ra *resources.RedisAccount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConnectRedis", ra)
}

// ConnectRedis indicates an expected call of ConnectRedis.
func (mr *MockIRedisMockRecorder) ConnectRedis(ra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectRedis", reflect.TypeOf((*MockIRedis)(nil).ConnectRedis), ra)
}

// CreateRedisMutex mocks base method.
func (m *MockIRedis) CreateRedisMutex(key string, options ...redsync.Option) *redsync.Mutex {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRedisMutex", varargs...)
	ret0, _ := ret[0].(*redsync.Mutex)
	return ret0
}

// CreateRedisMutex indicates an expected call of CreateRedisMutex.
func (mr *MockIRedisMockRecorder) CreateRedisMutex(key interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRedisMutex", reflect.TypeOf((*MockIRedis)(nil).CreateRedisMutex), varargs...)
}

// CreateRedisync mocks base method.
func (m *MockIRedis) CreateRedisync() *redsync.Redsync {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRedisync")
	ret0, _ := ret[0].(*redsync.Redsync)
	return ret0
}

// CreateRedisync indicates an expected call of CreateRedisync.
func (mr *MockIRedisMockRecorder) CreateRedisync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRedisync", reflect.TypeOf((*MockIRedis)(nil).CreateRedisync))
}

// Del mocks base method.
func (m *MockIRedis) Del(keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockIRedisMockRecorder) Del(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockIRedis)(nil).Del), keys...)
}

// Get mocks base method.
func (m *MockIRedis) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRedisMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRedis)(nil).Get), key)
}

// GetSet mocks base method.
func (m *MockIRedis) GetSet(key string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSet", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSet indicates an expected call of GetSet.
func (mr *MockIRedisMockRecorder) GetSet(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSet", reflect.TypeOf((*MockIRedis)(nil).GetSet), key, data)
}

// HDel mocks base method.
func (m *MockIRedis) HDel(key string, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// HDel indicates an expected call of HDel.
func (mr *MockIRedisMockRecorder) HDel(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockIRedis)(nil).HDel), varargs...)
}

// HGetAll mocks base method.
func (m *MockIRedis) HGetAll(key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll.
func (mr *MockIRedisMockRecorder) HGetAll(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockIRedis)(nil).HGetAll), key)
}

// HMGet mocks base method.
func (m *MockIRedis) HMGet(key string, fields ...string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet.
func (mr *MockIRedisMockRecorder) HMGet(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockIRedis)(nil).HMGet), varargs...)
}

// HMSet mocks base method.
func (m *MockIRedis) HMSet(key string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSet", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSet indicates an expected call of HMSet.
func (mr *MockIRedisMockRecorder) HMSet(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockIRedis)(nil).HMSet), key, data)
}

// HMSetEx mocks base method.
func (m *MockIRedis) HMSetEx(key string, parameter resources.SetExParameter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSetEx", key, parameter)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSetEx indicates an expected call of HMSetEx.
func (mr *MockIRedisMockRecorder) HMSetEx(key, parameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSetEx", reflect.TypeOf((*MockIRedis)(nil).HMSetEx), key, parameter)
}

// JSONDel mocks base method.
func (m *MockIRedis) JSONDel(key, path string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONDel", key, path)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONDel indicates an expected call of JSONDel.
func (mr *MockIRedisMockRecorder) JSONDel(key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONDel", reflect.TypeOf((*MockIRedis)(nil).JSONDel), key, path)
}

// JSONGet mocks base method.
func (m *MockIRedis) JSONGet(key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONGet", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONGet indicates an expected call of JSONGet.
func (mr *MockIRedisMockRecorder) JSONGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONGet", reflect.TypeOf((*MockIRedis)(nil).JSONGet), key)
}

// JSONMGet mocks base method.
func (m *MockIRedis) JSONMGet(path string, keys ...string) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONMGet", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONMGet indicates an expected call of JSONMGet.
func (mr *MockIRedisMockRecorder) JSONMGet(path interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMGet", reflect.TypeOf((*MockIRedis)(nil).JSONMGet), varargs...)
}

// JSONSet mocks base method.
func (m *MockIRedis) JSONSet(key string, data interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONSet", key, data)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONSet indicates an expected call of JSONSet.
func (mr *MockIRedisMockRecorder) JSONSet(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONSet", reflect.TypeOf((*MockIRedis)(nil).JSONSet), key, data)
}

// Keys mocks base method.
func (m *MockIRedis) Keys(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockIRedisMockRecorder) Keys(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockIRedis)(nil).Keys), pattern)
}

// LLen mocks base method.
func (m *MockIRedis) LLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LLen indicates an expected call of LLen.
func (mr *MockIRedisMockRecorder) LLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LLen", reflect.TypeOf((*MockIRedis)(nil).LLen), key)
}

// LPush mocks base method.
func (m *MockIRedis) LPush(key string, value ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range value {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LPush indicates an expected call of LPush.
func (mr *MockIRedisMockRecorder) LPush(key interface{}, value ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, value...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockIRedis)(nil).LPush), varargs...)
}

// LRange mocks base method.
func (m *MockIRedis) LRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRange indicates an expected call of LRange.
func (mr *MockIRedisMockRecorder) LRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockIRedis)(nil).LRange), key, start, stop)
}

// LockRedisMutex mocks base method.
func (m *MockIRedis) LockRedisMutex(mutex *redsync.Mutex, tries int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockRedisMutex", mutex, tries)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockRedisMutex indicates an expected call of LockRedisMutex.
func (mr *MockIRedisMockRecorder) LockRedisMutex(mutex, tries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockRedisMutex", reflect.TypeOf((*MockIRedis)(nil).LockRedisMutex), mutex, tries)
}

// Pipeline mocks base method.
func (m *MockIRedis) Pipeline() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pipeline")
}

// Pipeline indicates an expected call of Pipeline.
func (mr *MockIRedisMockRecorder) Pipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipeline", reflect.TypeOf((*MockIRedis)(nil).Pipeline))
}

// SAdd mocks base method.
func (m *MockIRedis) SAdd(key string, data ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range data {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SAdd indicates an expected call of SAdd.
func (mr *MockIRedisMockRecorder) SAdd(key interface{}, data ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, data...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockIRedis)(nil).SAdd), varargs...)
}

// SIsMember mocks base method.
func (m *MockIRedis) SIsMember(key string, data interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIsMember", key, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SIsMember indicates an expected call of SIsMember.
func (mr *MockIRedisMockRecorder) SIsMember(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIsMember", reflect.TypeOf((*MockIRedis)(nil).SIsMember), key, data)
}

// SPop mocks base method.
func (m *MockIRedis) SPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SPop indicates an expected call of SPop.
func (mr *MockIRedisMockRecorder) SPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPop", reflect.TypeOf((*MockIRedis)(nil).SPop), key)
}

// Scan mocks base method.
func (m *MockIRedis) Scan(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockIRedisMockRecorder) Scan(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockIRedis)(nil).Scan), key)
}

// Set mocks base method.
func (m *MockIRedis) Set(key string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIRedisMockRecorder) Set(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIRedis)(nil).Set), key, data)
}

// SetEx mocks base method.
func (m *MockIRedis) SetEx(key string, parameter resources.SetExParameter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEx", key, parameter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEx indicates an expected call of SetEx.
func (mr *MockIRedisMockRecorder) SetEx(key, parameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEx", reflect.TypeOf((*MockIRedis)(nil).SetEx), key, parameter)
}

// XDel mocks base method.
func (m *MockIRedis) XDel(stream string, ids ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XDel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// XDel indicates an expected call of XDel.
func (mr *MockIRedisMockRecorder) XDel(stream interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XDel", reflect.TypeOf((*MockIRedis)(nil).XDel), varargs...)
}
