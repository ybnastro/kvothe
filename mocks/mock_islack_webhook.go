// Code generated by MockGen. DO NOT EDIT.
// Source: islack_webhook.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	slack "github.com/ashwanthkumar/slack-go-webhook"
	gomock "github.com/golang/mock/gomock"
	slack0 "github.com/slack-go/slack"
)

// MockISlackWebhook is a mock of ISlackWebhook interface.
type MockISlackWebhook struct {
	ctrl     *gomock.Controller
	recorder *MockISlackWebhookMockRecorder
}

// MockISlackWebhookMockRecorder is the mock recorder for MockISlackWebhook.
type MockISlackWebhookMockRecorder struct {
	mock *MockISlackWebhook
}

// NewMockISlackWebhook creates a new mock instance.
func NewMockISlackWebhook(ctrl *gomock.Controller) *MockISlackWebhook {
	mock := &MockISlackWebhook{ctrl: ctrl}
	mock.recorder = &MockISlackWebhookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISlackWebhook) EXPECT() *MockISlackWebhookMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockISlackWebhook) Send(webhookURL, proxy string, payload slack.Payload) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", webhookURL, proxy, payload)
	ret0, _ := ret[0].([]error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockISlackWebhookMockRecorder) Send(webhookURL, proxy, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockISlackWebhook)(nil).Send), webhookURL, proxy, payload)
}

// SendWebhook mocks base method.
func (m *MockISlackWebhook) SendWebhook(ctx context.Context, payload slack0.WebhookMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWebhook", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWebhook indicates an expected call of SendWebhook.
func (mr *MockISlackWebhookMockRecorder) SendWebhook(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWebhook", reflect.TypeOf((*MockISlackWebhook)(nil).SendWebhook), ctx, payload)
}
