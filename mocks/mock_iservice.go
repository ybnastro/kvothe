// Code generated by MockGen. DO NOT EDIT.
// Source: IService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	"github.com/SurgicalSteel/kvothe/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// GetSongQuoteByID mocks base method.
func (m *MockIService)GetSongQuoteByID(id int64) (*models.SongQuote, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongQuoteByID", id)
	ret0, _ := ret[0].(*models.SongQuote)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSongQuoteByID indicates an expected call of GetSongQuoteByID.
func (mr *MockIServiceMockRecorder) GetSongQuoteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongQuoteByID", reflect.TypeOf((*MockIService)(nil).GetSongQuoteByID), id)
}

// GetAllSongData mocks base method.
func (m *MockIService)GetAllSongData() ([]models.SongQuote, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSongData")
	ret0, _ := ret[0].([]models.SongQuote)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllSongData indicates an expected call of GetAllSongData.
func (mr *MockIServiceMockRecorder) GetAllSongData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSongData", reflect.TypeOf((*MockIService)(nil).GetAllSongData))
}

// BackfillRedis mocks base method.
func (m *MockIService)BackfillRedis() (error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackfillRedis")
	ret0, _ := ret[0].(error)
	return ret0
}

// BackfillRedis indicates an expected call of BackfillRedis.
func (mr *MockIServiceMockRecorder) BackfillRedis(songQuote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackfillRedis", reflect.TypeOf((*MockIService)(nil).BackfillRedis))
}

